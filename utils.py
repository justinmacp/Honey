import json
from collections import Counter

'''
    uses json
    retrieve_sentences(path) takes in the path to a json file that is structured as follows:
    
    {"review":
        [{"rating": "5", "sentence": "This is sentence one."},
        {"rating": "5", "sentence": "Sentence two is here."},
        .
        .
        .
        {"rating": "4", "sentence": "The tenth of sentences, which is coincidentally also the last sentence, is written here"}]
    }
    
    it returns 5 lists for each of the different ratings, neglecting any rating that is not an integer number from 1 to 5
'''
def retrieve_sentences(path):               #function to retrieve histogram of word probabilities
    with open(path) as json_file:           #open file
        data = json.load(json_file)         #load file into data
        list5 = list()                      #initialize list for sentences ranked 5
        list4 = list()                      #initialize list for sentences ranked 4
        list3 = list()                      #initialize list for sentences ranked 3
        list2 = list()                      #initialize list for sentences ranked 2
        list1 = list()                      #initialize list for sentences ranked 1
        for p in data['review']:            #parse through sentences
            if p['rating'] == '5' :         #if sentence is ranked 5
                list5.append(p['sentence']) #add sentence to list of rank 5 sentences
            elif p['rating'] == '4' :       #if sentence is ranked 4
                list4.append(p['sentence']) #add sentence to list of rank 4 sentences
            elif p['rating'] == '3' :       #if sentence is ranked 3
                list3.append(p['sentence']) #add sentence to list of rank 3 sentences
            elif p['rating'] == '2' :       #if sentence is ranked 2
                list2.append(p['sentence']) #add sentence to list of rank 2 sentences
            elif p['rating'] == '1' :       #if sentence is ranked 1
                list1.append(p['sentence']) #add sentence to list of rank 1 sentences
    json_file.close()                       #close the file
    return list1,list2,list3,list4,list5    #return all lists in rising order

'''
    uses Counter from collections
    retrieve_wordcount(sentencelist) takes in a list that is generated by retrieve_sentences, i.e. this list will contain all sentences from a review in a list and it returns the individual words in all the sentences along with their total count
'''
def retrieve_wordcount(sentencelist):               #function to retrieve wordcount
    wordlist = list()                               #create list to store words
    for p in sentencelist:                          #for each sentence in the list
        splitsen = p.split()                        #split sentences into individual words
        for element in splitsen:                    #for all words in the sentence
            wordlist.append(element)                #add all words to the wordlist
    wordlist = [x for x in wordlist if x != '-']    #remove all dashes from the wordlist

    for i in range(len(wordlist)):          #iterate through all words to remove punctuation etc.
        newstring = wordlist[i]             #place full word into a placeholder
        #check beginning of word for apostrophes etc.
        if not (newstring[0].isalnum()):    #if first character is not aphanumeric
            newstring = newstring[1:]       #remove it
        
        #check end of word for punctuation, elipses etc.
        if not (newstring[len(newstring)-1].isalnum()):         #in a 3x nested if statement check the last 3 characters
            newstring = newstring[:len(newstring)-1]            #if last char is a symbol remove it
            if not (newstring[len(newstring)-1].isalnum()):     #if second last char is a symbol
                newstring = newstring[:len(newstring)-1]        #remove it
                if not (newstring[len(newstring)-1].isalnum()): #if third last char is a symbol
                    newstring = newstring[:len(newstring)-1]    #remove it

    wordlist[i] = newstring #replace word from list with the cleaned up string
    
    #instantiate a dictionary object to give the number of times a word has been counted for each word
    dict = {}                       #instantiate the dictionary object
    for element in wordlist:        #go throught the wordlist
        if not element in dict:     #if word doesnt exist in dictionary
            dict[element] = 1       #add word to dictionary
        else:                       #if word already exists in dictionary
            dict[element] += 1      #increment count of word
    return dict

